#pragma once
#include "Component.h"
#include <glew.h>



class GLObject;
class TransformComponent;
class PainterComponent : public Component
{
private:
	GLObject* glObject;
	bool visible;

	TransformComponent* trans;
	TransformComponent* parentTrans;

	void PrintGLError(GLenum error)
	{
		/*switch (error)
		{
		case GL_INVALID_ENUM:
			printf("GL_INVALID_ENUM\n");
			break;
		case GL_INVALID_VALUE:
			printf("GL_INVALID_VALUE\n");
			break;
		case GL_INVALID_OPERATION:
			printf("GL_INVALID_OPERATION\n");
			break;
		case GL_INVALID_FRAMEBUFFER_OPERATION:
			printf("GL_INVALID_FRAMEBUFFER_OPERATION\n");
			break;
		case GL_OUT_OF_MEMORY:
			printf("GL_OUT_OF_MEMORY\n");
			break;
		case GL_STACK_UNDERFLOW:
			printf("GL_STACK_UNDERFLOW\n");
			break;
		case GL_STACK_OVERFLOW:
			printf("GL_STACK_OVERFLOW\n");
			break;
		default: break;
		}*/
	}

public:
	PainterComponent();
	~PainterComponent();

	void SetVisible(bool isVisible) { this->visible = isVisible; }
	bool IsVisible() { return this->visible; }

	// Autogenerated by MJEngine automation tools
	// Start implementation functions
	bool Init();
	void Update();
	void Destroy();
	void HandleEvent(const Event* const evt);
	// End implementation functions

	
};

