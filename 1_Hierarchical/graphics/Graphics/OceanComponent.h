// ClothComponent.H
// Header autogenerated by MJEngine automation tools
// WARNING: Do not modify autogenerated comments, automation 
// tools depend on them.

// Edition author: mzaldivar

#pragma once

#include "Component.h"
#include "Texture.h"
#include "Shader.h"
#include "LightPointComponent.h"
#include "IFFT2.h"
#include "FFT2.h"

#include <vector>
#include <complex>
#include <glm.hpp>
#include <glew.h>
#include <SDL.h>
#include <SDL_ttf.h>

typedef std::vector<std::vector<std::complex<float>>> COMPLEX_MATRIX;

struct NormalVectorComplex
{
	std::complex<float> h;
	glm::vec2 displacement;
	glm::vec3 normal;
};

struct WaveVertexPOM
{
	// displacement movement in x and z axis
	// height movement in y axis
	glm::vec3 location_i;
	glm::vec3 normal_i;
	glm::vec2 uv;
	std::complex<float> h_tilde_i;
	std::complex<float> h_tilde_conjugate_i;
	glm::vec3 start_pos_i;
};



class TransformComponent;
class OceanComponent : public Component
{
private:
	// Start Private properties list

	// owner references
	TransformComponent* trans;

	// <simulation> ocean properties
	float t, time_step;
	float gravity;
	int N, N_plus_1, length, logDim;
	float Phillips_A;
	float height_control;
	glm::vec2 wind_dir;
	COMPLEX_MATRIX h_tilde;
	COMPLEX_MATRIX h_tilde_slopeX, h_tilde_slopeZ;					// for normals computing
	COMPLEX_MATRIX h_tilde_displX, h_tilde_displZ;	// for normals computing
	//FFT<float>* fft;
	FFT2<float>* ifft2;
	// <\simulation>

	// <rendering>
	int positionAttributeIndex = 0, uvAttributeIndex = 1, normalAttributeIndex = 2;
	std::vector<WaveVertexPOM> vertices;
	std::vector<unsigned int> indices;
	unsigned int indices_count;
	GLuint vao;
	GLuint vbo_vertices;
	GLuint vbo_indices;
	Texture* texture;
	LightPointComponent* light;
	GLuint vertexAttributeLocation;
	GLuint textureAttributeLocation;
	GLuint normalAttributeLocation;
	// <\rendering>


	// End Private properties list

	// Start private user defined functions

	// simulation functions
	glm::vec2 waveVector(int n_prime, int m_prime);
	float dispersionRelation(int n_prime, int m_prime);
	float phillipsSpectrum(int n_prime, int m_prime);
	std::complex<float> hTildeT0(int n_prime, int m_prime);
	std::complex<float> hTilde(float t, int n_prime, int m_prime);
	void computeWaveHeight(float t);

	// helper functions
	void initializeMatrices();
	void initializeVertexProperties();
	void initializeRenderIndices();

	// rendering functions
	/*
	void computeNormals();
	void createGLBuffers();
	void deleteGLBuffers();
	void useVAO(GLuint vaoId);
	void buildClothVBOs();
	void createTrianglesData();
	void updateTrianglesData();*/

	void createGLBuffers();
	void buildOceanVBOs();
	void createTexture();
	void deleteGLBuffers();
	void drawOcean();
	

	// End private user defined functions

public:

	// Start Public properties list

	// TODO - declare public members

	// End Private properties list

	OceanComponent();
	~OceanComponent();

	// Start implementation functions
	bool Init();
	void Update();
	void Destroy();
	void Serialize(std::istringstream* objcontentStream);
	void CompleteExtraSetup();
	void Start();
	void HandleEvent(const Event* const evt);
	// End implementation functions

	// Start public user defined functions

	// TODO - declare user defined public functions

	// End public user defined functions
};
