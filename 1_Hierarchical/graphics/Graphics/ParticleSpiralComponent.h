// ParticleSpiralComponent.H
// Header autogenerated by MJEngine automation tools
// WARNING: Do not modify autogenerated comments, automation 
// tools depend on them.

// Edition author: mzaldivar

#pragma once
#include "Component.h"
#include "FrameRateController.h"
#include <vector>
#include <string>
#include <glm.hpp>


class ParticleSystem;
class MeshParticle;
class TransformComponent;
class LightPointComponent;
class ParticleSpiralComponent : public Component
{
private:
	// Start Private properties list

		// TODO - declare private members
	float systemAngle;

	ParticleSystem* particleSystem;
	std::vector<MeshParticle*> particlesContainer;
	TransformComponent* trans;
	TransformComponent* transBH;
	LightPointComponent* light;

	glm::vec3 vo;	// point in the vector u 
	glm::vec3 u;	// rotation axis
	float h;		// time step (delta time)
	float sigma;	// controls spiral speed

	int randomLocationFactor;
	int currentParticles;
	int maxParticles;
	short int lifeSpan;

	std::string textureImage;

	// End Private properties list
	
	// Start private user defined functions

		// TODO - declare user defined private functions
	void updateFromUI();
	void updateParticleContainer();
	void updateModelMatrices();
	glm::vec3 computeNewPosition(glm::vec3 prevPos, glm::vec3 prevVelo);
	glm::vec3 computeNewVelocity(glm::vec3 prevVel);

	glm::vec3 computeObitAcceleration(glm::vec3& location);
	glm::vec3 computeSpiralAcceleration(glm::vec3& prevVelo);
	
	void manageLifeCycle(glm::vec3& location,
		glm::vec3& velocity, float& angle, float& scale);
	void spawnRandomLocation(glm::vec3& location);
	void spawnDefaultLocation(glm::vec3& location);
	void spawnDefaultVelocity(glm::vec3 & velocity);
	void spawnDefaultAngle(float& angle);
	void spawnDefaultScale(float& scale);

	glm::vec3 splittedAccelerationOperators(glm::vec3& velocity, glm::vec3& location);

	
	// End private user defined functions

public:

	// Start Public properties list

		// TODO - declare public members

	// End Private properties list

	ParticleSpiralComponent();
	~ParticleSpiralComponent();

	// Start implementation functions
	bool Init();
	void Update();
	void Destroy();
	void Serialize(std::istringstream* objcontentStream);
	void CompleteExtraSetup();
	void Start();
	void HandleEvent(const Event* const evt);
	// End implementation functions

	// Start public user defined functions

		// TODO - declare user defined public functions

	// End public user defined functions
};
