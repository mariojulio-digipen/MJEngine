// FollowMeComponent.H
// Header autogenerated by MJEngine automation tools
// WARNING: Do not modify autogenerated comments, automation 
// tools depend on them.

// Edition author: mzaldivar

#pragma once
#include "Component.h"
#include "VQS.h"
#include "Quaternion.h"
#include <vector>
#include <glm.hpp>

struct IKKeyFrame
{
	std::vector<Quaternion> rotators;
	double time;
};

struct CCDFramesPair
{
	Quaternion thisFrame;
	Quaternion nextFrame;
};

class GameObject;
class TransformComponent;
class FollowMeComponent : public Component
{
private:
	// Start Private properties list

	//std::vector<IKKeyFrame> ikKeyFrames;
	CCDFramesPair framePair;
	float t = 0.0;
	unsigned int count = 0;
	bool playInterpolate = false;


	std::vector<float> debugAngles;
	std::string end_effector = "EndEffector";
	std::string root = "Hips";

	// properties required for interpolation
	//std::vector< std::vector<Quaternion> > frameAngles;
	//std::vector<Quaternion> angles;


	// This project will only support 1 follower (the skelton)
	std::vector<GameObject*> links;
	std::vector<int> priorityList;

	/*TransformComponent* followerLeftArmTrans;
	TransformComponent* followerRightArmTrans;
	TransformComponent* followerRootTrans;*/
	TransformComponent* targetTrans;
	GameObject* endEffector;

	bool startIKCCD;

	int ccd_iterations;
	// End Private properties list
	
	// Start private user defined functions
	//void lookAtMe(GameObject* object);
	void computeCCD();
	bool evaluateDistanceCurrentLinkToTarget(glm::vec3* pd, glm::vec3* pc);
	void getBonesHierarchy(GameObject* go, std::vector<GameObject*>* links);

	//debug
	float debug_angle = 0.0f;


	// End private user defined functions

public:

	// Start Public properties list

		// TODO - declare public members

	std::vector<CCDFramesPair> FramesRotators;
	// End Private properties list

	FollowMeComponent();
	~FollowMeComponent();

	// Start implementation functions
	bool Init();
	void Update();
	void HandleEvent(const Event* const evt);
	// End implementation functions

	// Start public user defined functions

		// TODO - declare user defined public functions

	// End public user defined functions
};
