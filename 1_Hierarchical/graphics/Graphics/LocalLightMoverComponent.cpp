// LocalLightMoverComponent.CPP
// Implementation autogenerated by MJEngine automation tools
// WARNING: Do not modify autogenerated comments, automation 
// tools depend on them.

// Edition author: mzaldivar

#include "LocalLightMoverComponent.h"
#include "InputManager.h"
#include "GameObject.h"
#include "TransformComponent.h"
#include <sstream>

extern InputManager* inputManager;

LocalLightMoverComponent::LocalLightMoverComponent()
{
}


LocalLightMoverComponent::~LocalLightMoverComponent()
{
}


bool LocalLightMoverComponent::Init()
{
	// TODO - Implement initializations here
	// This function runs once when object manager
	// load objects, before serialization
	transform = GetOwner()->FindComponent<TransformComponent>();
	if (transform)
		return true;
	return false;
}


void LocalLightMoverComponent::Update()
{
	// TODO - Implement all the updates here
	// This function is executed once everyframe

	float velo = 0.2f;
	float delta = 0.3f;

	if (inputManager->IsKeyDown(SDL_SCANCODE_KP_6))
	{
		transform->SetPosition(
			glm::vec3(
				transform->GetPosition().x + velo, 
				transform->GetPosition().y, 
				transform->GetPosition().z));
	}

	if (inputManager->IsKeyDown(SDL_SCANCODE_KP_4))
	{
		transform->SetPosition(
			glm::vec3(
				transform->GetPosition().x - velo,
				transform->GetPosition().y,
				transform->GetPosition().z));
	}

	if (inputManager->IsKeyDown(SDL_SCANCODE_KP_8))
	{
		transform->SetPosition(
			glm::vec3(
				transform->GetPosition().x,
				transform->GetPosition().y,
				transform->GetPosition().z + velo));
	}

	if (inputManager->IsKeyDown(SDL_SCANCODE_KP_5))
	{
		transform->SetPosition(
			glm::vec3(
				transform->GetPosition().x,
				transform->GetPosition().y,
				transform->GetPosition().z - velo));
	}

	if (inputManager->IsKeyDown(SDL_SCANCODE_KP_2))
	{
		transform->SetPosition(
			glm::vec3(
				transform->GetPosition().x,
				transform->GetPosition().y + velo,
				transform->GetPosition().z));
	}

	if (inputManager->IsKeyDown(SDL_SCANCODE_KP_0))
	{
		transform->SetPosition(
			glm::vec3(
				transform->GetPosition().x,
				transform->GetPosition().y - velo,
				transform->GetPosition().z));
	}
}


void LocalLightMoverComponent::Serialize(std::istringstream* objcontentStream)
{
	std::string line;
	std::getline((*objcontentStream), line);

	std::istringstream lineStream(line.c_str());
	std::string word;

	while ((*objcontentStream) >> word)
	{
		if (word == "#")
		{
			std::getline((*objcontentStream), line);
			continue;
		}
		
		// TODO - Implement more if statements according to the file format
		// This function runs right after the Init function

	}
}


