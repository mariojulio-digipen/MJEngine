// ParticleVortexComponent.H
// Header autogenerated by MJEngine automation tools
// WARNING: Do not modify autogenerated comments, automation 
// tools depend on them.

// Edition author: mzaldivar

#pragma once
#include "Component.h"
#include <vector>
#include <string>
#include <glm.hpp>

class ParticleSystem;
class MeshParticle;
class TransformComponent;
class LightPointComponent;
class ParticleVortexComponent : public Component
{
private:
	// Start Private properties list

		// TODO - declare private members
	ParticleSystem* particleSystem;
	std::vector<MeshParticle*> particlesContainer;
	int currentParticles;
	TransformComponent* trans;
	LightPointComponent* light;
	bool lit;

	// Particle Physics
	//glm::vec3 xth;	// next position

	//glm::mat3 R;	// rotation matrix about axis vector u
	glm::vec3 vo;	// point in the vector u (how shrinked or stretched is the vortex)
	glm::vec3 u;	// rotation axis
	//float angle;	// rotation angle

	float K;		// controls the rotation rate
	float T;		// controls the tightness (1 <= T <= 2)
	float h;		// time step (delta time)

	std::string textureImage;
	// End Private properties list
	
	// Start private user defined functions

		// TODO - declare user defined private functions
	glm::mat3 computeRotationMatrix(float angle);
	float computeRotationAngle(glm::vec3 xt);
	//void computeNewVelocityNumerically();
	//void computeNewVelocityAnalitically();
	
				   
	// End private user defined functions

public:

	// Start Public properties list

		// TODO - declare public members

	// End Private properties list

	ParticleVortexComponent();
	~ParticleVortexComponent();

	// Start implementation functions
	bool Init();
	void Update();
	void Destroy();
	void Serialize(std::istringstream* objcontentStream);
	void CompleteExtraSetup();
	void Start();
	void HandleEvent(const Event* const evt);
	// End implementation functions

	// Start public user defined functions

		// TODO - declare user defined public functions

	// End public user defined functions
};
