// ClothComponent.H
// Header autogenerated by MJEngine automation tools
// WARNING: Do not modify autogenerated comments, automation 
// tools depend on them.

// Edition author: mzaldivar

#pragma once

#include "Component.h"
#include "Particle.h"
#include "Spring.h"
#include "Texture.h"

#include <vector>
#include <glm.hpp>
#include <glew.h>
#include <SDL.h>
#include <SDL_ttf.h>


typedef std::vector<std::vector<Particle*> > ParticleGrid;
//typedef std::vector<Particle*> ParticleList;
typedef std::vector<Spring*> SpringList;

class TransformComponent;
class ClothComponent : public Component
{
private:
	// Start Private properties list

	// owner references
	TransformComponent* trans;
	TransformComponent* targetSphereTrans;

	// cloth properties
	int cols; // how many particles in  cloth plane x
	int rows; // how many particles in cloth plane y
	float spaceBetweenParticles;
	float mass, k, l;
	SpringList springs;


	// visual attributes
	glm::vec3 color;
	Texture* texture;

	// graphics data
	int vertexNumber = 0;
	ParticleGrid particleGrid; // vertices and normals
	ParticleGrid particleGridNextFrame;
	GLuint clothVAO = 0;
	GLuint clothVBO_V = 0;
	GLuint clothVBO_T = 0;
	GLuint clothVBO_N = 0;
	std::vector<float> vertexData;
	std::vector<float> textureData;
	std::vector<float> normalData;
	int positionAttributeIndex = 0, uvAttributeIndex = 1, normalAttributeIndex = 2;

	// End Private properties list
	
	// Start private user defined functions

	// simulation functions
	void init2DGrid();
	void initParticles();
	void initSprings();
	void updateGridStickPoints();

	// rendering functions
	void createTexture();
	void computeNormals(); 
	void createGLBuffers();
	void deleteGLBuffers();
	void useVAO(GLuint vaoId);
	void buildClothVBOs();
	void createTrianglesData();
	void updateTrianglesData();
	void drawCloth();

	bool buffersReady = false;

	// End private user defined functions

public:

	// Start Public properties list

		// TODO - declare public members

	// End Private properties list

	ClothComponent();
	~ClothComponent();

	// Start implementation functions
	bool Init();
	void Update();
	void Serialize(std::istringstream* objcontentStream);
	void HandleEvent(const Event* const evt);
	void CompleteExtraSetup();
	// End implementation functions

	// Start public user defined functions

		// TODO - declare user defined public functions

	// End public user defined functions
};
