// SpawnerComponent.CPP
// Implementation autogenerated by MJEngine automation tools
// WARNING: Do not modify autogenerated comments, automation 
// tools depend on them.

// Edition author: mzaldivar

#include "SpawnerComponent.h"
#include "TransformComponent.h"
#include "LightPointComponent.h"
#include "PainterComponent.h"
#include "UIManager.h"
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <random>
extern UIManager* uiManager;

SpawnerComponent::SpawnerComponent()
{
}


SpawnerComponent::~SpawnerComponent()
{
}


bool SpawnerComponent::Init()
{
	// TODO - Implement initializations here
	// This function runs once when object manager
	// load objects, before serialization

	return true;
}


void SpawnerComponent::Update()
{
	if (!firstLightSpawned)
	{
		GameObject* newsphere = NULL;
		GameObject* newsphere2 = NULL;

		std::map<std::string, GameObject*> tmpMap = resourceManager->Get3DGameObjectsMap();
		std::map<std::string, GameObject*>::iterator go3DIt = tmpMap.find("Sphere");
		if (go3DIt == tmpMap.end())
			return;

		// default global light 1
		newsphere = resourceManager->SpawnNewGameObjectFromArchetype("Sphere");
		newsphere->IsAlive = false;
		newsphere->IsDeferred = false;

		LightPointComponent* light = newsphere->FindComponent<LightPointComponent>();
		ImVec4 colorvec;
		colorvec.x = light->GetLightColor().x;
		colorvec.y = light->GetLightColor().y;
		colorvec.z = light->GetLightColor().z;
		uiManager->LightsColors.push_back(colorvec);

		

		// default global light 2
		newsphere2 = resourceManager->SpawnNewGameObjectFromArchetype("Sphere");
		newsphere2->IsAlive = true;
		newsphere2->IsDeferred = false;

		light = newsphere2->FindComponent<LightPointComponent>();
		colorvec.x = light->GetLightColor().x;
		colorvec.y = light->GetLightColor().y;
		colorvec.z = light->GetLightColor().z;




		uiManager->LightsColors.push_back(colorvec);
		firstLightSpawned = true;
		return;
	}

}


void SpawnerComponent::Serialize(std::istringstream* objcontentStream)
{
	std::string line;
	std::getline((*objcontentStream), line);

	std::istringstream lineStream(line.c_str());
	std::string word;

	while ((*objcontentStream) >> word)
	{
		if (word == "#")
		{
			std::getline((*objcontentStream), line);
			continue;
		}
		
		// TODO - Implement more if statements according to the file format
		// This function runs right after the Init function

	}
}


